public class BsTree
{
	Node root = null;
	
	class Node
	{
		int val;
		Node left = null;
		Node right = null;
	
		public Node(int val)
		{
			this.val = val;
		}
	}
	
	public void init(int[] ini)
	{
		if(ini == null)
			ini = new int[0];
		
		for(int i = 0; i < ini.length; i++)
		{
			add(ini[i]);
		}
	}
	
	public void add(int val)
	{
		if(root == null)
		{
			root = new Node(val);
			return;
		}
		
		addNode(root, val);
	}
	
	private void addNode(Node p, int val)
	{
		if(val < p.val)
		{
			if(p.left == null)
				p.left = new Node(val);
			else
			addNode(p.left, val);
		}
		else
		{
			if(p.right == null)
				p.right = new Node(val);
			else
			addNode(p.right, val);
		}
	}
	
	public void print()
	{
		printNode(root);
	}
	
	private void printNode(Node p)
	{
		if(p == null)
			return;
		
		printNode(p.left);
		System.out.print(p.val + ", ");
		printNode(p.right);
	}
	
	public int size()
	{
		int res = 0;
		res += sizeNode(root);
		return res;
	}

	private int sizeNode(Node p) 
	{
		if(p == null)
			return 0;
		
		return sizeNode(p.left) + sizeNode(p.right) + 1;
	}
	
	public int nodes()
	{
		return nodesNode(root);
	}
	
	private int nodesNode(Node p)
	{
		if(p == null)
			return 0;
		
		if(p.left != null || p.right != null)
		return 1 + nodesNode(p.left) + nodesNode(p.right);
		
		return 0;
	}
	
	public int leaves()
	{
		int res = 0;
		
		res += leavesNode(root);
		
		return res;
	}
	
	private int leavesNode(Node p)
	{
		if(p == null)
			return 0;
		int res = 0;
		res += leavesNode(p.left) + leavesNode(p.right);
		
		if(p.left == null && p.right == null)
			return 1;
		
		return res;
	}
	
	public int hight()
	{
		return hightNode(root);
	}
	
	private int hightNode(Node p)
	{
		if(p == null)
			return 0;
		
		return Math.max(hightNode(p.left), hightNode(p.right)) + 1;  
	}
	
	public int[] toArray()
	{
		return toArrayNode(root);
	}

	class counter
	{
		int i = 0;
	}
	
	private int[] toArrayNode(Node p)
	{
		if(p == null)
			return new int[0];
		
		int[] ar = new int[size()];
		printNode(p.left);
		ar[i++] = p.val;
		printNode(p.right);
		
		return ar;
	}
}
